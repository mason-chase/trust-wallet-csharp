using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;
using TrustWallet.Asset.Services.CodeSignatureServiceProperties;
using static TrustWallet.Asset.Data.Settings;

namespace TrustWallet.Asset.Services
{
    /// <summary>
    /// Hash signature for C# code generated by TW tools.
    /// Use this to know if Dict or Consts must be updated and compare the generated code and existing code.
    /// </summary>
    public static class CodeSignatureService
    {
        private const  string CodeHashSignatureJson = "CodeSignatures.json";
        private const  string LogoHashesJson = "LogoHashes.json";

        public static CodeSignatures GetSignatures()
        {
            string signatureJson = File.ReadAllText($"{DataPath}{DS}{CodeHashSignatureJson}");
            CodeSignatures codeHashSignature = JsonConvert.DeserializeObject<CodeSignatures>(signatureJson);
            return codeHashSignature;
        }

        public static void SaveSignatures(CodeSignatures codeSignature)
        {
            string codeHashSignature = JsonConvert.SerializeObject(codeSignature, Formatting.Indented);
            File.WriteAllText($"{DataPath}{DS}{CodeHashSignatureJson}", codeHashSignature);
        }

        public static Dictionary<string, string> GetLogoHashes()
        {
            string signatureJson = File.ReadAllText($"{DataPath}{DS}{LogoHashesJson}");
            Dictionary<string, string> logoHashes = JsonConvert.DeserializeObject<Dictionary<string, string>>(signatureJson);
            return logoHashes;
        }

        public static void SaveLogoHashes(Dictionary<string, string> logoHashesString)
        {
            string logoHashes = JsonConvert.SerializeObject(logoHashesString);
            File.WriteAllText($"{LogoPath}{DS}{LogoHashesJson}", logoHashes);
        }
    }

}
