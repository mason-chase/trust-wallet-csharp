using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Mc2.TrustWallet.Asset.FolderModels;
using Mc2.TrustWallet.Asset.Services.CodeSignatureServiceProperties;
using static Mc2.TrustWallet.Asset.Settings;

namespace Mc2.TrustWallet.Asset.Services
{
    /// <summary>
    /// Hash signature for C# code generated by TW tools.
    /// Use this to know if Dict or Consts must be updated and compare the generated code and existing code.
    /// </summary>
    public static class CodeSignatureService
    {
        private const  string CODE_HASH_SIGNATURE_JSON = "CodeSignatures.json";
        private const  string LOGO_HASHES_JSON = "LogoHashes.json";

        public static CodeSignatures GetSignatures()
        {
            string signatureJson = File.ReadAllText($"{DataPath}{Ds}{CODE_HASH_SIGNATURE_JSON}");
            CodeSignatures codeHashSignature = JsonConvert.DeserializeObject<CodeSignatures>(signatureJson);
            return codeHashSignature;
        }

        public static void SaveSignatures(CodeSignatures codeSignature)
        {
            string codeHashSignature = JsonConvert.SerializeObject(codeSignature, Formatting.Indented);
            File.WriteAllText($"{DataPath}{Ds}{CODE_HASH_SIGNATURE_JSON}", codeHashSignature);
        }

        public static Dictionary<string, string> GetLogoHashes()
        {
            string signatureJson = File.ReadAllText($"{DataPath}{Ds}{LOGO_HASHES_JSON}");
            Dictionary<string, string> logoHashes = JsonConvert.DeserializeObject<Dictionary<string, string>>(signatureJson);
            if (logoHashes is null)
                logoHashes = new Dictionary<string, string>() { };

            return logoHashes;
        }

        public static void SaveLogoHashes(Dictionary<string, string> logoHashesString)
        {
            string logoHashes = JsonConvert.SerializeObject(logoHashesString.OrderBy(key => key.Key), Formatting.Indented);
            File.WriteAllText($"{LogoPath}{Ds}{LOGO_HASHES_JSON}", logoHashes);
        }
    }

}
